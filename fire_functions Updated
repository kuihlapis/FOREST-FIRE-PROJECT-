# imports numpy as np

import numpy as np

# define a function that creates a random grid based on a given probability


def ran_grid(x, p):
    """
    This function creates a x by x grid using arrays, then randomly assigns
    a value between 0 and 1 to it. If the random value is less than p
    it assigns a 1 to it if it is greater it assigns a 0

    Parameters
    ----------
    x : int
        Sets the length and width of the array.

    p : float
        Sets probability 

    Returns
    -------
    Grid L.

    """
    # This creates an array in the form of a x by x matrix with random
    # numbers between 0 and 1
    L = np.random.rand(x, x)

    # this loop goes through the array and assigns a 1 if the random value
    # is less than p and a 0 if the value is greater than p
    for i in range(x):
        for j in range(x):
            if L[i][j] > p:
                L[i][j] = 0  # A 0 represents no tree
            else:
                L[i][j] = 1  # a 1 represents a tree

    return L


# define fire burning program
def Burn(L, x):
    """
    This function takes a grid of 1s and 0s and sets 'fire' to them
    this fire works by spreading from an on fire tree, represented by 2,
    to a not burning tree 1. It then puts out any burning trees. The 
    function tracks time saying it takes 1 unit of time for fire to 
    spread from tree to tree.

    Parameters
    ----------
    L : array
        grid that will be burnt containing 1 and 0.
    x : int
        length of grid.

    Returns
    -------
    time of burning.

    """
    time = 1

    # w is in place of x-1
    w = x-1

    # H is half the area of the matrix
    h = int(x/2)

    # Set the left half of the area on fire
    for i in range(x):
        for j in range(h):
            if L[i][j] == 1:
                L[i][j] = 2

    # This while loop allows for the fire to also spread backwards and upwards,
    # against the progression of the for loops
    while np.any(L == 2):
        new_L = np.copy(L)
        for j in range(x):
            for i in range(x):

                # Identify a tree on fire
                if L[i][j] == 2:

                    # checks if the tree is not at the borders of the grid
                    #using i and j greater than or less than w
                    if i > 0 and L[i-1][j] == 1: #spreads upwards
                        new_L[i-1][j] = 2
                    if i < w and L[i+1][j] == 1:#spread down
                        new_L[i+1][j] = 2
                    if j > 0 and L[i][j-1] == 1:#spred backwards
                        new_L[i][j-1] = 2
                    if j < w and L[i][j+1] == 1:#spread forwards
                        new_L[i][j+1] = 2

                    # After spreading, mark the current tree as burned
                    new_L[i][j] = 3
        L = new_L
        time += 1  # increase by 1 per round of while loop

                    
    return time, L
